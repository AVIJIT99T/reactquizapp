{"version":3,"sources":["Components/Main2.jsx","Components/Quiz2.jsx","Components/End.jsx","App.jsx","index.js"],"names":["Main2","className","class","to","Quiz2","useState","ques","setQues","currQues","setCurrQues","optionChose","setOptionChose","score","setScore","history","useHistory","getQues","a","axios","get","res","console","log","data","results","useEffect","allAnswers","correct_answer","incorrect_answers","question","map","ans","index","type","onClick","length","push","finalScore","End","location","useLocation","state","showScore","App","exact","path","component","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.b7ab4622.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./Main2.css\";\n\nconst Main2 = () => {\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col-sm-4\">\n            <div className=\"card pt-2 p-3 m-auto mt-5 mb-4 shadow card_main2\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Welcome to weekly</h5>\n                <h6 className=\"card-subtitle mb-2\">Quiz Contest</h6>\n\n                <ul className=\"main2\">\n                  <li className=\"card-text\">\n                    This section contains 10 questions.\n                  </li>\n\n                  <li className=\"card-text\">\n                    Each correct answer will carry +1 marks.\n                  </li>\n                  <li className=\"card-text\">\n                    There will be no negative marking for wrong answer.\n                  </li>\n                </ul>\n                <NavLink class=\"btn btn-primary btn_main2\" to=\"/quiz2\">\n                  Start Quiz\n                </NavLink>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Main2;\n","import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport \"./Quiz2.css\";\nimport { useHistory } from \"react-router-dom\";\nimport { NavLink } from \"react-router-dom\";\n\nconst Quiz2 = () => {\n  const [ques, setQues] = useState();\n  const [currQues, setCurrQues] = useState(0);\n  const [optionChose, setOptionChose] = useState(\"\");\n  const [score, setScore] = useState(0);\n  const history = useHistory();\n\n  const getQues = async () => {\n    try {\n      const res = await axios.get(\n        \"https://opentdb.com/api.php?amount=10&category=21&difficulty=medium&type=multiple\"\n      );\n      console.log(res.data.results);\n      setQues(res.data.results);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getQues();\n  }, []);\n\n  const shuffle = (array) => {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 != currentIndex) {\n      //  Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n\n      //  And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  };\n\n  // const shuffle = (array) => {\n  //   let currentIndex = array.length,\n  //     temporaryValue,\n  //     randomIndex;\n  //   while (0 !== currentIndex) {\n  //     randomIndex = Math.floor(Math.random() * currentIndex);\n  //     currentIndex -= 1;\n  //     temporaryValue = array[currentIndex];\n  //     array[currentIndex] = array[randomIndex];\n  //     array[randomIndex] = temporaryValue;\n  //   }\n  //   return array;\n  // };\n\n  const prevQuestion = () => {\n    setCurrQues(currQues - 1);\n  };\n\n  const nextQuestion = () => {\n    if (ques[currQues].correct_answer == optionChose) {\n      setScore(score + 1);\n    }\n    console.log(\"Next\", score);\n    setCurrQues(currQues + 1);\n    setOptionChose(\"\");\n  };\n\n  const endQuiz = () => {\n    if (ques[currQues].correct_answer == optionChose) {\n      setScore(score + 1);\n      console.log(\"If\", score);\n      history.push(\"/end2\", { finalScore: score + 1 });\n    } else {\n      console.log(\"Else\", score);\n      history.push(\"/end2\", { finalScore: score });\n    }\n  };\n\n  let allAnswers;\n  {\n    ques != null &&\n      (allAnswers = [\n        ques[currQues].correct_answer,\n        ...ques[currQues].incorrect_answers,\n      ]);\n  }\n\n  // shuffle(allAnswers);\n  console.log(allAnswers);\n\n  return (\n    <>\n      {ques != null && (\n        <>\n          <div className=\"container\">\n            <div className=\"row justify-content-md-center\">\n              <div className=\"col-sm-4\">\n                <div className=\"card pt-2 p-3 m-auto mt-5 mb-4 shadow card_quiz2\">\n                  <div className=\"card-body\">\n                    <h5 className=\"card-title\">Question : {currQues + 1} </h5>\n                    <h6 className=\"card-subtitle mb-3\">\n                      {ques[currQues].question}\n                    </h6>\n\n                    {allAnswers.map((ans, index) => {\n                      return (\n                        <>\n                          <ul className=\"ul_quiz2\">\n                            <li className=\"card-text\">\n                              <button\n                                type=\"button\"\n                                className=\"btn btn-light btn_quiz2\"\n                                onClick={() => {\n                                  setOptionChose(ans);\n                                }}\n                              >\n                                {ans}\n                              </button>\n                            </li>\n                          </ul>\n                        </>\n                      );\n                    })}\n\n                    {/* <ul className=\"ul_quiz\">\n                      <li className=\"card-text\">\n                        <button\n                          type=\"button\"\n                          className=\"btn mt-1 mb-1 btn-light btn_quiz\"\n                          onClick={() => {\n                            setOptionChose([ques[currQues].correct_answer]);\n                          }}\n                        >\n                          {ques[currQues].correct_answer}\n                        </button>\n                      </li>\n                      <li className=\"card-text\">\n                        <button\n                          type=\"button\"\n                          className=\"btn mt-1 mb-1 btn-light btn_quiz\"\n                          onClick={() =>\n                            setOptionChose([\n                              ques[currQues].incorrect_answers[0],\n                            ])\n                          }\n                        >\n                          {ques[currQues].incorrect_answers[0]}\n                        </button>\n                      </li>\n                      <li className=\"card-text\">\n                        <button\n                          type=\"button\"\n                          className=\"btn mt-1 mb-1 btn-light btn_quiz\"\n                          onClick={() =>\n                            setOptionChose([\n                              ques[currQues].incorrect_answers[1],\n                            ])\n                          }\n                        >\n                          {ques[currQues].incorrect_answers[1]}\n                        </button>\n                      </li>\n                      <li className=\"card-text\">\n                        <button\n                          type=\"button\"\n                          className=\"btn mt-1 mb-1 btn-light btn_quiz\"\n                          onClick={() =>\n                            setOptionChose([\n                              ques[currQues].incorrect_answers[2],\n                            ])\n                          }\n                        >\n                          {ques[currQues].incorrect_answers[2]}\n                        </button>\n                      </li>\n                    </ul> */}\n                    {currQues > 0 && (\n                      <a\n                        className=\"btn btn-primary btn_left\"\n                        onClick={prevQuestion}\n                      >\n                        Prev\n                      </a>\n                    )}\n\n                    {currQues != ques.length - 1 ? (\n                      <>\n                        <a\n                          className=\"btn btn-primary btn_right\"\n                          onClick={nextQuestion}\n                        >\n                          Next\n                        </a>\n                      </>\n                    ) : (\n                      <a\n                        className=\"btn btn-primary btn_right\"\n                        onClick={() => {\n                          endQuiz();\n                        }}\n                      >\n                        Submit\n                      </a>\n                    )}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Quiz2;\n\n/*\n {ques != null && (\n        <div className=\"container\">\n          <div className=\"row justify-content-md-center\">\n            <div className=\"col-sm-4\">\n              <div className=\"card pt-2 p-3 m-auto mt-5 mb-4 shadow card_quiz2\">\n                <div className=\"card-body\">\n                  {ques.map((curr, index) => {\n                    return (\n                      <>\n                        <h5 className=\"card-title\">Question : {index + 1} </h5>\n                        <h6 className=\"card-subtitle mb-2\">{curr.question}</h6>\n\n                        <ul className=\"ul_quiz2\">\n                          <li className=\"card-text\">\n                            <button\n                              type=\"button\"\n                              className=\"btn mt-1 mb-1 btn-light btn_quiz2\"\n                            >\n                              {curr.correct_answer}\n                            </button>\n                          </li>\n                          <li className=\"card-text\">\n                            <button\n                              type=\"button\"\n                              className=\"btn mt-1 mb-1 btn-light btn_quiz2\"\n                            >\n                              {curr.incorrect_answers[0]}\n                            </button>\n                          </li>\n                          <li className=\"card-text\">\n                            <button\n                              type=\"button\"\n                              className=\"btn mt-1 mb-1 btn-light btn_quiz2\"\n                            >\n                              {curr.incorrect_answers[1]}\n                            </button>\n                          </li>\n                          <li className=\"card-text\">\n                            <button\n                              type=\"button\"\n                              className=\"btn mt-1 mb-1 btn-light btn_quiz2\"\n                            >\n                              {curr.incorrect_answers[2]}\n                            </button>\n                          </li>\n                        </ul>\n                      </>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      )} \n*/\n","import React from \"react\";\nimport { NavLink, useLocation } from \"react-router-dom\";\n\nconst End = () => {\n  const location = useLocation();\n  console.log(\"Avi\", location.state.finalScore);\n  let showScore = location.state.finalScore;\n\n  return (\n    <>\n      <div className=\"container\">\n        <div className=\"row justify-content-md-center\">\n          <div className=\"col-sm-4\">\n            <div className=\"card pt-2 p-3 m-auto mt-5 mb-4 shadow card_end\">\n              <div className=\"card-body\">\n                <h5 className=\"card-title\">Congratulations!!!</h5>\n                <h6 className=\"card-subtitle mb-2\">\n                  You have scored {showScore} / 10 marks.\n                </h6>\n\n                <NavLink className=\"btn btn-primary btn_end\" to=\"/\">\n                  Play Again\n                </NavLink>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default End;\n","import React, { useState } from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport MainPage from \"./MainPage\";\nimport Quiz from \"./Quiz\";\nimport EndQuiz from \"./EndQuiz\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Main2 from \"./Components/Main2\";\nimport Quiz2 from \"./Components/Quiz2\";\nimport End from \"./Components/End\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [score, setScore] = useState(0);\n\n  return (\n    <>\n      <div className=\"app\">\n        \n          <Switch>\n            {/* <Route exact path=\"/\" component={MainPage} />\n            <Route path=\"/quiz\" component={Quiz} />\n            <Route path=\"/end\" component={EndQuiz} /> */}\n            <Route exact path=\"/\" component={Main2} />\n            <Route path=\"/quiz2\" component={Quiz2} />\n            <Route path=\"/end2\" component={End} />\n          </Switch>\n        \n      </div>\n\n      {/* <MainPage /> */}\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import {HashRouter as Router} from \"react-router-dom\"\nimport {BrowserRouter as Router} from \"react-router-dom\"\n\nReactDOM.render(<React.StrictMode>\n<Router basename={process.env.PUBLIC_URL}><App /></Router>\n</React.StrictMode>, document.getElementById(\"root\"));\n"],"sourceRoot":""}